#!/usr/bin/env python3
#
# Generate training data files from results.
#
import csv
import sys
from argparse import ArgumentParser

from labm8 import fs


class MalformedDataException(Exception):
  pass


def unique(a):
  return list(set(a))


def intersect(a, b):
  return list(set(a) & set(b))


def read_results(csv_path):
  with open(csv_path) as infile:
    reader = csv.DictReader(infile)
    return [row for row in reader]


def print_header(file=sys.stdout):
  print(
      "benchmark",
      "dataset",
      "comp",
      "rational",
      "mem",
      "localmem",
      "coalesced",
      "atomic",
      "transfer",
      "wgsize",
      "F1:transfer/(comp+mem)",
      "F2:coalesced/mem",
      "F3:(localmem/mem)*avgws",
      "F4:comp/mem",
      "oracle",
      "runtime",
      "speedup",
      "penalty",
      # Added after-the-fact:
      "runtime_cpu",
      "runtime_gpu",
      sep=',', file=file)


def fetch_result(benchmark, dataset, results):
  """
  Fetch result from results which matches keys.
  """
  for result in results:
    if result["benchmark"] == benchmark and result["dataset"] == dataset:
      return result
  # Something went very wrong.
  assert (False)


def fetch_kernel_features(filename, kernel, kernel_features):
  res = [r for r in kernel_features if
         r['file'] == filename and
         r['kernel'] == kernel]
  assert (len(res) == 1)
  return res[0]


def print_datapoint(benchmark, dataset, cpu, gpu, file=sys.stdout):
  cpur = fetch_result(benchmark, dataset, cpu)
  gpur = fetch_result(benchmark, dataset, gpu)

  if float(gpur['runtime']) <= float(cpur['runtime']):
    oracle = gpur
    fast = float(gpur['runtime'])
    slow = float(cpur['runtime'])
  else:
    oracle = cpur
    fast = float(cpur['runtime'])
    slow = float(gpur['runtime'])
  speedup = slow / fast
  penalty = fast / slow
  transfer = int(oracle['transfer'])
  comp = int(oracle['comp'])
  mem = int(oracle['mem'])
  localmem = int(oracle['localmem'])
  wgsize = int(round((int(gpur["wgsize"]) + int(cpur["wgsize"])) / 2))
  F1 = transfer / max((comp + mem), 1)
  F3 = (localmem / max(mem, 1)) * wgsize
  print(
      benchmark,
      dataset,
      comp,
      oracle['rational'],
      mem,
      localmem,
      oracle['coalesced'],
      oracle['atomic'],
      transfer,
      wgsize,
      round(F1, 6),
      oracle['F2:coalesced/mem'],
      round(F3, 6),
      oracle['F4:comp/mem'],
      'GPU' if oracle == gpur else 'CPU',
      fast,
      '{0:.2f}'.format(speedup),
      '{0:.2f}'.format(penalty),
      # Added after-the-fact:
      cpur['runtime'],
      gpur['runtime'],
      sep=',', file=file)


def mktraining(cpu_path, gpu_path, out=sys.stdout, metaout=sys.stderr):
  print("loading cpu results ... ", end='', file=metaout)
  cpu = read_results(cpu_path)
  print(len(cpu), file=metaout)
  print("loading gpu results ... ", end='', file=metaout)
  gpu = read_results(gpu_path)
  print(len(gpu), file=metaout)

  print("common results ... ", end='', file=metaout)
  common = intersect(
      [(r['benchmark'], r['dataset']) for r in cpu],
      [(r['benchmark'], r['dataset']) for r in gpu])
  print(len(common), file=metaout)

  print("    # benchmarks ... ", end='', file=metaout)
  files = unique([d[0] for d in common])
  print(len(files), file=metaout)

  print("    # datasets ... ", end='', file=metaout)
  datasets = unique([d[1] for d in common])
  print(len(datasets), file=metaout)

  print_header(file=out)
  for benchmark, dataset in common:
    print_datapoint(benchmark, dataset, cpu, gpu, file=out)
  print('done', file=sys.stderr)


def main():
  parser = ArgumentParser()
  parser.add_argument('cpu', help='path to CPU results CSV')
  parser.add_argument('gpu', help='path to GPU results CSV')
  args = parser.parse_args()

  assert (fs.exists(args.cpu))
  assert (fs.exists(args.gpu))

  mktraining(args.cpu, args.gpu)


if __name__ == '__main__':
  main()
